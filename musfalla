<?php // -*- mode: php; -*-
// vim: ft=php sw=2 ts=2 et

// Load config
$config = include("./config/musfalla.php");

// CORS
header("Access-Control-Allow-Origin: " . $config["origin"]);
header("Access-Control-Allow-Methods: GET, POST, PATCH, OPTIONS");
header("Access-Control-Allow-Credentials: true");

if($_SERVER["REQUEST_METHOD"] === "OPTIONS") {
  header("Access-Control-Allow-Headers: Origin, Content-Type, Accept, X-Requested-With");
  header("Access-Control-Max-Age: 86400");
  header("Cache-Control: public, max-age=86400");
  header("Vary: origin");
  exit(0);
}

switch($_SERVER["CONTENT_TYPE"]) {
case "application/json":
  $_BODY = json_decode(file_get_contents("php://input"), true);
  break;

default:
  parse_str(file_get_contents("php://input"), $_BODY);
  break;
}

// Get input variables
$api_vars = preg_split("/\//", ltrim($_SERVER["PATH_INFO"], '/'));
parse_str($_SERVER["QUERY_STRING"], $query_vars);

// Filter out empty variables
$api_vars = array_filter($api_vars, static function($var){return $var !== NULL && $var !== "";} );

$api_url = "{$_SERVER["REQUEST_SCHEME"]}://{$_SERVER["HTTP_HOST"]}{$_SERVER["SCRIPT_NAME"]}";

// Connect to Postgres
$pg_auth = "";
foreach(array("host", "dbname", "user", "password") as $key) {
  if(array_key_exists($key, $config))
    $pg_auth .= " " . $key . "=" . $config[$key];
}
$dbconn = pg_connect(ltrim($pg_auth))
  or die("Could not connect to Postgres: " . pg_last_error());

// prepare query and handle error
function prepare($dbconn, $name, $sql) {
  pg_prepare($dbconn, $name, $sql)
    or die("Failed to prepare query: " . pg_last_error());
}

// Get only specified fields/columns from Postgres query
// Safer than using user controlled data in the query
function get_fields($result, $fields, $types) {
  if (isset($fields) && $fields !== "*") {
    $fields = preg_split("/,/", $fields);

    $out = array();
    while ($row = pg_fetch_array($result, null, PGSQL_ASSOC)) {
      $filtered_row = array();
      foreach ($fields as $field) {
        if (isset($row[$field])) {
          $filtered_row[$field] = parse_type($row[$field], $types[$field]??"string");
        }
      }
      $out[] = $filtered_row;
    }
  } else {
    $out = array();
    while($row = pg_fetch_array($result, null, PGSQL_ASSOC)) {
      foreach($row as $field => &$val) {
        $val = parse_type($val, $types[$field]??"string");
      }
      $out[] = $row;
    }
  }
  return $out;
}

function sql_bool($x) {
  return ($x == "t")
       ? "true"
       : (($x == "f")
       ? "false"
       : $x);
}

function as_sql_bool($x) {
  return ($x == true)
       ? "t"
       : (($x == false)
       ? "f"
       : $x);
}

function parse_type($var, $type) {
  $o = array("flags"=>FILTER_NULL_ON_FAILURE);

  // this is disgusting but works
  $type = explode(":", $type);
  switch($type[0]) {
  case "array":
    if(!isset($type[1])) return null;
    return array_map(fn($el) => parse_type($el, $type[1]), explode(",", $var));
  }
  $type = $type[0];

  switch($type) {
  case "int":
    $var = filter_var($var, FILTER_VALIDATE_INT, $o);
    break;

  case "float":
    $var = filter_var($var, FILTER_VALIDATE_FLOAT, $o);
    break;

  case "bool":
    $var = filter_var(sql_bool($var), FILTER_VALIDATE_BOOL, $o);
    break;
  }

  return $var;
}

function generate_token($uid) {
  global $dbconn;

  $token = "";
  while(true) {
    $token = bin2hex(random_bytes(32));

    prepare($dbconn, "gen_token", "
INSERT INTO auth_token (uid, token)
VALUES ($1, $2)");

    if(pg_execute($dbconn, "gen_token", array($uid, $token)))
      break;
  }

  return $token;
}

function invalidate_tokens($uid) {
  global $dbconn;

  prepare($dbconn, "invalidate_tokens", "
DELETE FROM auth_token
WHERE uid = $1");
  pg_execute($dbconn, "invalidate_tokens", array($uid));
}

function invalidate_account($uid) {
  global $dbconn;

  prepare($dbconn, "invalidate_account_events", "
DELETE FROM event
WHERE device_id IN (
  SELECT id
  FROM device
  WHERE owner_id = $1
)");
  pg_execute($dbconn, "invalidate_account_events", array($uid));

  prepare($dbconn, "invalidate_account_devices", "
DELETE FROM device
WHERE owner_id = $1");
  pg_execute($dbconn, "invalidate_account_devices", array($uid));
}

function is_authenticated($uid = null) {
  global $authorization;

  if($uid !== null)
    return $authorization === $uid;
  else
    return $authorization !== null;
}

function is_device($device_id = null) {
  global $device;

  if($device_id !== null)
    return $device === $device_id;
  else
    return $device !== null;
}

$field_types = array(
  "event" => array(
    "t" => "int",
    "device_id" => "int",
    "type" => "nyi",
  ),
  "device" => array(
    "id" => "int",
    "name" => "string",
    "owner_id" => "int",
  ),
  "account" => array(
    "id" => "int",
    "name" => "string",
    "devices" => "array:int",
  ),
);

$authorization = null;
$device = null;
if(isset($_SERVER["HTTP_AUTHORIZATION"])) {
  // Set $authorization to user id if authenticated
  prepare($dbconn, "check_auth_token", "
SELECT uid
FROM auth_token
WHERE token = $1 AND until > now()");
  $result = pg_execute($dbconn, "check_auth_token", array(
    $_SERVER["HTTP_AUTHORIZATION"],
  ));
  $result = pg_fetch_array($result);

  if(isset($result["uid"])) {
    $authorization = $result["uid"];
    goto end_auth;
  }

  // Set $device to device id if a correct secret is provided
  // Assumes these are unique and do not overlap with auth_tokens (because they
  // are 256-bit)
  prepare($dbconn, "check_device_secret", "
SELECT id
FROM device
WHERE secret = $1");
  $result = pg_execute($dbconn, "check_device_secret", array(
    $_SERVER["HTTP_AUTHORIZATION"],
  ));
  $result = pg_fetch_array($result);

  if(isset($result["id"])) {
    $device = $result["id"];
    goto end_auth;
  }
}
end_auth:

$method = "{$_SERVER["REQUEST_METHOD"]} {$api_vars[0]}";
switch($method) {
case "POST authenticate":
  if(!isset($_BODY["email"]) || !isset($_BODY["password"])) {
    http_response_code(400);
    die("email and password need to be provided");
  }
  prepare($dbconn, "authentication", "
SELECT pass, id
FROM account
WHERE email = $1");
  $result = pg_execute($dbconn, "authentication", array($_BODY["email"]));
  $result = pg_fetch_array($result);

  $pass = $result["pass"];
  $uid = $result["id"];
  if(!isset($uid) || !isset($pass)) {
    http_response_code(404);
    die("Account not found");
  }

  if(!password_verify($_BODY["password"], $pass)) {
    http_response_code(401);
    die("Wrong credentials");
  }

  die(generate_token($uid));
  break;

case "GET account":
  if(!is_authenticated()) {
    http_response_code(401);
    die("Not logged in");
  }
  prepare($dbconn, "get_account_devices", "
SELECT a.id, a.name, a.email, string_agg(d.id::varchar, ',') AS devices
FROM account AS a, device AS d
WHERE a.id = $1 AND d.owner_id = a.id
GROUP BY a.id, a.name, a.email");
  $result = pg_execute($dbconn, "get_account_devices", array($authorization));

  $data = json_encode(get_fields(
    $result,
    $query_vars["fields"]??null,
    $field_types["account"]??null
  )[0]??null);
  if($data != "null") {
    echo $data;
    break;
  }

  // if $data is null, account may not have any devices
  prepare($dbconn, "get_account", "
SELECT id, name, email, '' AS devices
FROM account
WHERE id = $1");
  $result = pg_execute($dbconn, "get_account", array($authorization));

  $data = json_encode(get_fields(
    $result,
    $query_vars["fields"]??null,
    $field_types["account"]??null
  )[0]??null);
  if($data == "null") http_response_code(404);
  echo $data;
  break;

case "POST account":
  if(!isset($_BODY["email"]) || !isset($_BODY["password"])) {
    http_response_code(400);
    die("'email' and 'password' POST arguments need to be provided");
  }

  prepare($dbconn, "post_account", "
INSERT INTO account (name, email, pass)
VALUES ($1, $2, $3)");
  pg_execute($dbconn, "post_account", array(
    $_BODY["name"]??"",
    $_BODY["email"],
    password_hash($_BODY["password"], PASSWORD_BCRYPT),
  ));
  break;

case "PATCH account":
  if(!is_authenticated()) {
    http_response_code(401);
    die("Not logged in");
  }

  $allowed_keys = array(
    "name" => "string",
    "email" => "string",
    "password" => "string",
  );

  $keys = "";
  $vars = array($authorization);
  $i = 2;
  $changed_password = false;
  foreach($_BODY as $key => $val) {
    if(array_key_exists($key, $allowed_keys)) {
      if($key === "password") {
        // password gets special treatment
        $key = "pass";
        $val = password_hash($val, PASSWORD_BCRYPT);
        $changed_password = true;
      }

      $keys .= "{$key} = $" . $i++ . ", ";
      $vars[] = parse_type($val, $allowed_keys[$key]);
    } else {
      http_response_code(400);
      die("Disallowed key: '{$key}'");
    }
  }
  $keys = rtrim($keys, ", ");

  if($keys === "") {
    http_response_code(400);
    die("Nothing specified in request body");
  }

  $sql = "UPDATE account SET " . $keys . " WHERE id = $1";
  prepare($dbconn, "patch_account", $sql);
  if(pg_execute($dbconn, "patch_account", $vars) && $changed_password)
    invalidate_tokens($authorization);
  break;

case "DELETE account":
  if(!is_authenticated()) {
    http_response_code(401);
    die("Not logged in");
  }

  prepare($dbconn, "delete_account", "
DELETE FROM account
WHERE id = $1");
  if(pg_execute($dbconn, "delete_account", array($authorization))) {
    invalidate_tokens($authorization);
    invalidate_account($authorization);
  }
  break;

case "GET devices":
  if(!is_authenticated()) {
    http_response_code(401);
    die("Not logged in");
  }
  prepare($dbconn, "get_device", "
SELECT id, name, owner_id
FROM device
WHERE owner_id = $1");
  $result = pg_execute($dbconn, "get_device", array($authorization));

  $data = json_encode(get_fields(
    $result,
    $query_vars["fields"]??null,
    $field_types["device"]??null
  )??null);
  if($data == "null") http_response_code(404);
  echo $data;
  break;

case "POST devices":
  if(!is_authenticated()) {
    http_response_code(401);
    die("Not logged in");
  }

  $secret = bin2hex(random_bytes(32));
  prepare($dbconn, "post_device", "
INSERT INTO device (name, owner_id, secret)
VALUES ($1, $2, $3)");
  pg_execute($dbconn, "post_device", array(
    $_BODY["name"]??"",
    $authorization,
    $secret,
  ));

  echo $secret;
  break;

case "PATCH devices":
  if(!is_authenticated()) {
    http_response_code(401);
    die("Not logged in");
  }
  if(!isset($_BODY["id"])) {
    http_response_code(400);
    die("'id' needs to be provided");
  }

  prepare($dbconn, "patch_device_permission", "
SELECT owner_id
FROM device
WHERE id = $1");
  $result = pg_execute($dbconn, "patch_device_permission", array(
    $_BODY["id"],
  ));
  $result = pg_fetch_row($result);

  if($result[0] !== $authorization) {
    http_response_code(403);
    die("You do not have permission to PATCH this device");
  }

  $allowed_keys = array(
    "name" => "string",
  );

  $keys = "";
  $vars = array($_BODY["id"]);
  $i = 2;
  foreach($_BODY as $key => $val) {
    if($key === "id") continue;
    if(array_key_exists($key, $allowed_keys)) {
      $keys .= "{$key} = $" . $i++ . ", ";
      $vars[] = parse_type($val, $allowed_keys[$key]);
    } else {
      http_response_code(400);
      die("Disallowed key: '{$key}'");
    }
  }
  $keys = rtrim($keys, ", ");

  if($keys === "") {
    http_response_code(400);
    die("Nothing specified in request body");
  }

  $sql = "UPDATE device SET " . $keys . " WHERE id = $1";
  prepare($dbconn, "patch_device", $sql);
  pg_execute($dbconn, "patch_device", $vars);
  break;

case "DELETE devices":
  if(!is_authenticated()) {
    http_response_code(401);
    die("Not logged in");
  }
  if(!isset($query_vars["id"])) {
    http_response_code(400);
    die("'id' query argument needs to be provided");
  }

  prepare($dbconn, "delete_device_permission", "
SELECT owner_id
FROM device
WHERE id = $1");
  $result = pg_execute($dbconn, "delete_device_permission", array(
    $query_vars["id"],
  ));
  $result = pg_fetch_row($result);

  if($result[0] !== $authorization) {
    http_response_code(403);
    die("You do not have permission to DELETE this device");
  }

  prepare($dbconn, "delete_device", "
DELETE FROM device
WHERE id = $1");
  pg_execute($dbconn, "delete_device", array(
    $query_vars["id"],
  ));
  break;

case "GET events":
  if(!is_authenticated()) {
    http_response_code(401);
    die("Not logged in");
  }
  $order_dir = isset($query_vars["reverse"]) ? "ASC" : "DESC";
  prepare($dbconn, "get_event", "
SELECT e.t, e.device_id, e.type
FROM event_unix AS e, device AS d
WHERE d.owner_id = $1 AND e.device_id = d.id
ORDER BY e.t {$order_dir}");
  $result = pg_execute($dbconn, "get_event", array($authorization));

  $data = json_encode(get_fields(
    $result,
    $query_vars["fields"]??null,
    $field_types["event"]??null
  )??null);
  if($data == "null") http_response_code(404);
  echo $data;
  break;

case "POST events":
  if(!is_device()) {
    http_response_code(401);
    die("No device matching secret");
  }

  $allowed_types = array(
    "open", "close",
  );
  if(!in_array($_BODY["type"]??null, $allowed_types)) {
    http_response_code(400);
    die("Invalid event type");
  }

  prepare($dbconn, "post_event", "
INSERT INTO event (device_id, type)
VALUES ($1, $2)");
  pg_execute($dbconn, "post_event", array(
    $device,
    $_BODY["type"],
  ));

  // TODO: optional mail notification
  break;

case "GET dump":
case "POST dump":
case "PATCH dump":
  echo "\$_SERVER:            "; print_r($_SERVER);
  echo "<br/>\$_POST:         "; print_r($_POST);
  echo "<br/>\$_BODY:         "; print_r($_BODY);
  echo "<br/>\$authorization: {$authorization}";
  echo "<br/>\$device:        {$device}";
  break;

default:
  http_response_code(404);
  die("Invalid method: " . $method);
}
